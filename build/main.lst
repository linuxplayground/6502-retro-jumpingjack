ca65 V2.19 - Git 5e5dd1d6c
Main file   : main.s
Current file: main.s

000000r 1               ; vim: set ft=asm_ca65 ts=4 sw=4 et:
000000r 1               .include "io.inc"
000000r 2               ; vim: set ft=asm_ca65 ts=4 sw=4 et:
000000r 2               vdp_ram = $bf30
000000r 2               vdp_reg = $bf31
000000r 2               
000000r 1               .include "app.inc"
000000r 2               ; vim: set ft=asm_ca65 et ts=4 sw=4
000000r 2               SFOS        = $200
000000r 2               REBOOT      = SFOS      + 3
000000r 2               WBOOT       = REBOOT    + 3
000000r 2               CONOUT      = WBOOT     + 3
000000r 2               CONIN       = CONOUT    + 3
000000r 2               CONST       = CONIN     + 3
000000r 2               CONPUTS     = CONST     + 3
000000r 2               CONBYTE     = CONPUTS   + 3
000000r 2               CONBEEP     = CONBYTE   + 3
000000r 2               SN_START    = CONBEEP   + 3
000000r 2               SN_SILENCE  = SN_START  + 3
000000r 2               SN_STOP     = SN_SILENCE + 3
000000r 2               SN_SEND     = SN_STOP   + 3
000000r 2               LED_ON      = SN_SEND   + 3
000000r 2               LED_OFF     = LED_ON    + 3
000000r 2               GET_BUTTON  = LED_OFF   + 3
000000r 2               ERROR_CODE  = GET_BUTTON + 3
000000r 2               
000000r 2               RSTFAR      = $231
000000r 2               
000000r 2               REGA        = $23F
000000r 2               REGX        = REGA   + 1
000000r 2               REGY        = REGX   + 1
000000r 2               ;
000000r 2               ; hard coded addresses that SFCP uses
000000r 2               FCB          = $380
000000r 2               FCB2         = $3A0
000000r 2               CMDLINE      = $300
000000r 2               CMDOFFSET    = $3C0    ; pointer into CMDLINE
000000r 2               SFOS_BUF     = $400
000000r 2               SFOS_BUF_END = $600
000000r 2               
000000r 2               VDP_SYNC     = $65F
000000r 2               TICKS        = $660    ; 32bit value holding number of 60hz periods since boot
000000r 2               
000000r 2               ; vdp stuffs
000000r 2               NAMETABLE               = $3800
000000r 2               COLORTABLE              = $2000
000000r 2               PATTERNTABLE            = $0000
000000r 2               SPRITEATTRIBUTETABLE    = $3B00
000000r 2               SPRITEPATTERNTABLE      = $1800
000000r 2               
000000r 1               
000000r 1               NUM_GAPS = 8
000000r 1               DEBUG = 0
000000r 1               
000000r 1               .autoimport
000000r 1               .globalzp ptr1, ptr2, tmp1
000000r 1               
000000r 1               .zeropage
000000r 1  00 00        ptr1:   .word 0
000002r 1  00 00        ptr2:   .word 0
000004r 1  00           tmp1:   .byte 0
000005r 1  00           tmp2:   .byte 0
000006r 1  00           frame:  .byte 0
000007r 1               
000007r 1               .bss
000000r 1  00           line:   .byte 0
000001r 1  00           gap:    .byte 0
000002r 1               
000002r 1               .code
000000r 1               
000000r 1               start:
000000r 1  20 rr rr         jsr vdp_g2_init
000003r 1               .if DEBUG
000003r 1                   lda #1
000003r 1                   ldx #$11
000003r 1                   jsr vdp_color_char
000003r 1               
000003r 1                   lda #2
000003r 1                   ldx #$21
000003r 1                   jsr vdp_color_char
000003r 1               
000003r 1                   lda #3
000003r 1                   ldx #$31
000003r 1                   jsr vdp_color_char
000003r 1               
000003r 1                   lda #4
000003r 1                   ldx #$41
000003r 1                   jsr vdp_color_char
000003r 1               
000003r 1                   lda #6
000003r 1                   ldx #$51
000003r 1                   jsr vdp_color_char
000003r 1               
000003r 1                   lda #7
000003r 1                   ldx #$61
000003r 1                   jsr vdp_color_char
000003r 1               
000003r 1                   lda #8
000003r 1                   ldx #$71
000003r 1                   jsr vdp_color_char
000003r 1               .endif
000003r 1  20 rr rr         jsr draw_lines
000006r 1               game_loop:
000006r 1                   ; frame 1/4
000006r 1  20 rr rr         jsr draw_gaps
000009r 1  20 rr rr         jsr vdp_wait
00000Cr 1  20 rr rr         jsr vdp_flush
00000Fr 1  E6 rr            inc frame
000011r 1               .if DEBUG
000011r 1                   jsr debug_pause
000011r 1               .endif
000011r 1                   ; frame 2/4
000011r 1  20 rr rr         jsr draw_gaps
000014r 1  20 rr rr         jsr vdp_wait
000017r 1  20 rr rr         jsr vdp_flush
00001Ar 1  E6 rr            inc frame
00001Cr 1               .if DEBUG
00001Cr 1                   jsr debug_pause
00001Cr 1               .endif
00001Cr 1                   ; frame 3/4
00001Cr 1  20 rr rr         jsr draw_gaps
00001Fr 1  20 rr rr         jsr vdp_wait
000022r 1  20 rr rr         jsr vdp_flush
000025r 1  E6 rr            inc frame
000027r 1               .if DEBUG
000027r 1                   jsr debug_pause
000027r 1               .endif
000027r 1                   ; frame 4/4
000027r 1  20 rr rr         jsr draw_gaps
00002Ar 1  20 rr rr         jsr vdp_wait
00002Dr 1  20 rr rr         jsr vdp_flush
000030r 1  E6 rr            inc frame
000032r 1               .if DEBUG
000032r 1                   jsr debug_pause
000032r 1               .endif
000032r 1               
000032r 1  EE rr rr         inc gaps_pos+0
000035r 1  EE rr rr         inc gaps_pos+1
000038r 1  EE rr rr         inc gaps_pos+2
00003Br 1  EE rr rr         inc gaps_pos+3
00003Er 1  CE rr rr         dec gaps_pos+4
000041r 1  CE rr rr         dec gaps_pos+5
000044r 1  CE rr rr         dec gaps_pos+6
000047r 1  CE rr rr         dec gaps_pos+7
00004Ar 1               
00004Ar 1               
00004Ar 1  20 0F 02         jsr CONST
00004Dr 1  C9 1B            cmp #$1b
00004Fr 1  F0 03            beq exit
000051r 1  4C rr rr         jmp game_loop
000054r 1               exit:
000054r 1  4C 06 02         jmp WBOOT
000057r 1               
000057r 1               debug_pause:
000057r 1  A2 01            ldx #1
000059r 1  20 rr rr     :   jsr vdp_wait
00005Cr 1  CA               dex
00005Dr 1  D0 FA            bne :-
00005Fr 1  60               rts
000060r 1               
000060r 1               draw_lines:
000060r 1  A0 00            ldy #0
000062r 1  20 rr rr         jsr draw_line
000065r 1  A0 03            ldy #3
000067r 1  20 rr rr         jsr draw_line
00006Ar 1  A0 06            ldy #6
00006Cr 1  20 rr rr         jsr draw_line
00006Fr 1  A0 09            ldy #9
000071r 1  20 rr rr         jsr draw_line
000074r 1  A0 0C            ldy #12
000076r 1  20 rr rr         jsr draw_line
000079r 1  A0 0F            ldy #15
00007Br 1  20 rr rr         jsr draw_line
00007Er 1  A0 12            ldy #18
000080r 1  20 rr rr         jsr draw_line
000083r 1  A0 15            ldy #21
000085r 1                   ; fall through
000085r 1               draw_line:
000085r 1  A2 00            ldx #0
000087r 1  20 rr rr         jsr vdp_xy_to_ptr
00008Ar 1  A0 1F            ldy #31
00008Cr 1  A9 01            lda #1
00008Er 1  91 rr        :   sta (ptr1),y
000090r 1  88               dey
000091r 1  10 FB            bpl :-
000093r 1  60               rts
000094r 1               
000094r 1               get_gap_xy:
000094r 1  48               pha
000095r 1  4A               lsr
000096r 1  4A               lsr
000097r 1  4A               lsr
000098r 1  4A               lsr
000099r 1  4A               lsr
00009Ar 1  85 rr            sta tmp1
00009Cr 1  0A               asl
00009Dr 1  18               clc
00009Er 1  65 rr            adc tmp1
0000A0r 1  A8               tay
0000A1r 1  68               pla
0000A2r 1  29 1F            and #$1F
0000A4r 1  AA               tax
0000A5r 1  60               rts
0000A6r 1               
0000A6r 1               draw_gaps:
0000A6r 1  A5 rr            lda frame
0000A8r 1  29 03            and #3
0000AAr 1  0A               asl
0000ABr 1  0A               asl         ; multiply by 4
0000ACr 1  8D rr rr         sta gaps_frame_jump + 1 ; self modifying code
0000AFr 1               
0000AFr 1               gaps_frame_jump:
0000AFr 1  80 FE            bra gaps_frame_jump
0000B1r 1  4C rr rr         jmp gaps_F0      ; +0 (Frame 0)
0000B4r 1  EA               nop
0000B5r 1  4C rr rr         jmp gaps_F1      ; +4 (Frame 1)
0000B8r 1  EA               nop
0000B9r 1  4C rr rr         jmp gaps_F2      ; +8 (Frame 2)
0000BCr 1  EA               nop
0000BDr 1  4C rr rr         jmp gaps_F3      ; +12 (Frame 3)
0000C0r 1               
0000C0r 1               gaps_F0:
0000C0r 1               .if DEBUG
0000C0r 1                   lda #'0'
0000C0r 1                   jsr CONOUT
0000C0r 1               .endif
0000C0r 1  A9 07            lda #(NUM_GAPS-1)
0000C2r 1  8D rr rr         sta gap
0000C5r 1               @gaploop:
0000C5r 1                   ; draw the outsides
0000C5r 1  AE rr rr         ldx gap
0000C8r 1  BD rr rr         lda gaps_pos,x
0000CBr 1  3A               dec
0000CCr 1  20 rr rr         jsr get_gap_xy      ; GAP 0
0000CFr 1  A9 01            lda #1
0000D1r 1  20 rr rr         jsr vdp_char_xy
0000D4r 1               
0000D4r 1  AE rr rr         ldx gap
0000D7r 1  BD rr rr         lda gaps_pos,x
0000DAr 1  18               clc
0000DBr 1  69 03            adc #3
0000DDr 1  20 rr rr         jsr get_gap_xy      ; GAP 4
0000E0r 1  A9 01            lda #1
0000E2r 1  20 rr rr         jsr vdp_char_xy
0000E5r 1               
0000E5r 1                   ; draw the middle gaps
0000E5r 1  AE rr rr         ldx gap
0000E8r 1  BD rr rr         lda gaps_pos,x
0000EBr 1  48               pha
0000ECr 1  20 rr rr         jsr get_gap_xy      ; GAP 1
0000EFr 1  A9 05            lda #5
0000F1r 1  20 rr rr         jsr vdp_char_xy
0000F4r 1  68               pla
0000F5r 1  1A               inc
0000F6r 1  48               pha
0000F7r 1  20 rr rr         jsr get_gap_xy      ; GAP 2
0000FAr 1  A9 05            lda #5
0000FCr 1  20 rr rr         jsr vdp_char_xy
0000FFr 1  68               pla
000100r 1  1A               inc
000101r 1  20 rr rr         jsr get_gap_xy      ; GAP 3
000104r 1  A9 05            lda #5
000106r 1  20 rr rr         jsr vdp_char_xy
000109r 1               
000109r 1                   ; gaploop
000109r 1  CE rr rr         dec gap
00010Cr 1  10 B7            bpl @gaploop
00010Er 1  60               rts
00010Fr 1               
00010Fr 1               gaps_F1:
00010Fr 1               .if DEBUG
00010Fr 1                   lda #'1'
00010Fr 1                   jsr CONOUT
00010Fr 1               .endif
00010Fr 1  A9 04            lda #4
000111r 1  8D rr rr         sta gap_frame_data + 0  ;11000000b      ; Cell 1 (Right-moving gaps)
000114r 1  A9 06            lda #6
000116r 1  8D rr rr         sta gap_frame_data + 1  ;00000011b      ; Cell 3 (Left-moving gaps)
000119r 1  A9 08            lda #8
00011Br 1  8D rr rr         sta gap_frame_data + 2  ;00111111b      ; Cell 4 (Right-moving gaps)
00011Er 1  A9 02            lda #2
000120r 1  8D rr rr         sta gap_frame_data + 3  ;11111100b      ; Cell 0 (Left-moving gaps)
000123r 1               
000123r 1  4C rr rr         jmp gaps_F123
000126r 1               
000126r 1               gaps_F2:
000126r 1               .if DEBUG
000126r 1                   lda #'2'
000126r 1                   jsr CONOUT
000126r 1               .endif
000126r 1  A9 03            lda #3
000128r 1  8D rr rr         sta gap_frame_data + 0  ;11110000b      ; Cell 1 (Right-moving gaps)
00012Br 1  A9 07            lda #7
00012Dr 1  8D rr rr         sta gap_frame_data + 1  ;00001111b      ; Cell 3 (Left-moving gaps)
000130r 1  A9 07            lda #7
000132r 1  8D rr rr         sta gap_frame_data + 2  ;00001111b      ; Cell 4 (Right-moving gaps)
000135r 1  A9 03            lda #3
000137r 1  8D rr rr         sta gap_frame_data + 3  ;11110000b      ; Cell 0 (Left-moving gaps)
00013Ar 1  4C rr rr         jmp gaps_F123
00013Dr 1               
00013Dr 1               gaps_F3:
00013Dr 1               .if DEBUG
00013Dr 1                   lda #'3'
00013Dr 1                   jsr CONOUT
00013Dr 1               .endif
00013Dr 1  A9 02            lda #2
00013Fr 1  8D rr rr         sta gap_frame_data + 0  ;11111100b      ; Cell 1 (Right-moving gaps)
000142r 1  A9 08            lda #8
000144r 1  8D rr rr         sta gap_frame_data + 1  ;00111111b      ; Cell 3 (Left-moving gaps)
000147r 1  A9 06            lda #6
000149r 1  8D rr rr         sta gap_frame_data + 2  ;00000011b      ; Cell 4 (Right-moving gaps)
00014Cr 1  A9 04            lda #4
00014Er 1  8D rr rr         sta gap_frame_data + 3  ;11000000b      ; Cell 0 (Left-moving gaps)
000151r 1               
000151r 1                   ; fall through
000151r 1               gaps_F123:
000151r 1                   ; draw cell 1 in gaps 0-3 (right down gaps)
000151r 1  A9 03            lda #3
000153r 1  8D rr rr         sta gap
000156r 1               @right_moving_gaps_cell_1:
000156r 1  AE rr rr         ldx gap
000159r 1  BD rr rr         lda gaps_pos,x
00015Cr 1  20 rr rr         jsr get_gap_xy
00015Fr 1  AD rr rr         lda gap_frame_data+0
000162r 1  20 rr rr         jsr vdp_char_xy
000165r 1  CE rr rr         dec gap
000168r 1  10 EC            bpl @right_moving_gaps_cell_1
00016Ar 1               
00016Ar 1                   ; Draw Cell 3 in gaps 4-7 (the Left/Up gaps)
00016Ar 1  A9 07            lda #7
00016Cr 1  8D rr rr         sta gap
00016Fr 1               @left_moving_gaps_cell_3:
00016Fr 1  AE rr rr         ldx gap
000172r 1  BD rr rr         lda gaps_pos,x
000175r 1  1A               inc
000176r 1  1A               inc
000177r 1  20 rr rr         jsr get_gap_xy
00017Ar 1  AD rr rr         lda gap_frame_data+1
00017Dr 1  20 rr rr         jsr vdp_char_xy
000180r 1  CE rr rr         dec gap
000183r 1  AD rr rr         lda gap
000186r 1  C9 03            cmp #3
000188r 1  D0 E5            bne @left_moving_gaps_cell_3
00018Ar 1               
00018Ar 1                   ; Draw gaps 0-3 (the Right/Down gaps)
00018Ar 1                   ; For each, AND the desired contents of cells 1 & 4 with what's
00018Ar 1                   ; already on the screen to allow for overlapping left-moving
00018Ar 1                   ; gaps.
00018Ar 1  A9 03            lda #3
00018Cr 1  8D rr rr         sta gap
00018Fr 1               @right_moving_gaps_14:
00018Fr 1  AD rr rr         lda gap_frame_data+0
000192r 1  85 rr            sta tmp2
000194r 1  AE rr rr         ldx gap
000197r 1  BD rr rr         lda gaps_pos,x          ; point to cell 1
00019Ar 1  20 rr rr         jsr gap_and_update
00019Dr 1               
00019Dr 1  AD rr rr         lda gap_frame_data+2
0001A0r 1  85 rr            sta tmp2
0001A2r 1  AE rr rr         ldx gap
0001A5r 1  BD rr rr         lda gaps_pos,x
0001A8r 1  18               clc
0001A9r 1  69 03            adc #3                  ; point to cell 4
0001ABr 1  20 rr rr         jsr gap_and_update
0001AEr 1               
0001AEr 1  AE rr rr         ldx gap
0001B1r 1  BD rr rr         lda gaps_pos,x
0001B4r 1  1A               inc                     ; point to cell 2
0001B5r 1  20 rr rr         jsr get_gap_xy
0001B8r 1  A9 05            lda #5                  ; empty gap
0001BAr 1  20 rr rr         jsr vdp_char_xy
0001BDr 1               
0001BDr 1  AE rr rr         ldx gap
0001C0r 1  BD rr rr         lda gaps_pos,x
0001C3r 1  1A               inc
0001C4r 1  1A               inc                     ; point to cell 3
0001C5r 1  20 rr rr         jsr get_gap_xy
0001C8r 1  A9 05            lda #5                  ; empty gap
0001CAr 1  20 rr rr         jsr vdp_char_xy
0001CDr 1               
0001CDr 1  CE rr rr         dec gap
0001D0r 1  10 BD            bpl @right_moving_gaps_14
0001D2r 1               
0001D2r 1                   ; Draw gaps 4-7 (the Left/Up gaps)
0001D2r 1                   ; For each, AND the desired contents of cells 0 & 3 with what's
0001D2r 1                   ; already on the screen to allow for overlapping right-moving
0001D2r 1                   ; gaps.
0001D2r 1  A9 07            lda #7
0001D4r 1  8D rr rr         sta gap
0001D7r 1               @left_moving_gaps_03:
0001D7r 1  AD rr rr         lda gap_frame_data+1
0001DAr 1  85 rr            sta tmp2
0001DCr 1  AE rr rr         ldx gap
0001DFr 1  BD rr rr         lda gaps_pos,x
0001E2r 1  1A               inc
0001E3r 1  1A               inc                     ; point to cell 3
0001E4r 1  20 rr rr         jsr gap_and_update
0001E7r 1               
0001E7r 1  AD rr rr         lda gap_frame_data+3
0001EAr 1  85 rr            sta tmp2
0001ECr 1  AE rr rr         ldx gap
0001EFr 1  BD rr rr         lda gaps_pos,x
0001F2r 1  3A               dec                     ; point to cell 0
0001F3r 1  20 rr rr         jsr gap_and_update
0001F6r 1               
0001F6r 1  AE rr rr         ldx gap
0001F9r 1  BD rr rr         lda gaps_pos,x          ; point to cell 1
0001FCr 1  20 rr rr         jsr get_gap_xy
0001FFr 1  A9 05            lda #5                  ; empty gap
000201r 1  20 rr rr         jsr vdp_char_xy
000204r 1               
000204r 1  AE rr rr         ldx gap
000207r 1  BD rr rr         lda gaps_pos,x
00020Ar 1  1A               inc                     ; point to cell 2
00020Br 1  20 rr rr         jsr get_gap_xy
00020Er 1  A9 05            lda #5                  ; empty gap
000210r 1  20 rr rr         jsr vdp_char_xy
000213r 1               
000213r 1  CE rr rr         dec gap
000216r 1  AD rr rr         lda gap
000219r 1  C9 03            cmp #3
00021Br 1  D0 BA            bne @left_moving_gaps_03
00021Dr 1  60               rts
00021Er 1               
00021Er 1               ; INPUT: A Cell position
00021Er 1               ;        tmp2 desired pattern
00021Er 1               gap_and_update:
00021Er 1  48               pha         ; save cell position
00021Fr 1  20 rr rr         jsr get_gap_xy
000222r 1  20 rr rr         jsr vdp_read_char_xy
000225r 1  0A               asl         ; x 2
000226r 1  AA               tax
000227r 1  BD rr rr         lda gap_and_idx+0,x
00022Ar 1  85 rr            sta ptr2 + 0
00022Cr 1  BD rr rr         lda gap_and_idx+1,x
00022Fr 1  85 rr            sta ptr2 + 1
000231r 1  A4 rr            ldy tmp2    ; desired pattern in Y
000233r 1  88               dey
000234r 1  B1 rr            lda (ptr2),y
000236r 1  85 rr            sta tmp2    ; save new pattern
000238r 1  68               pla
000239r 1  20 rr rr         jsr get_gap_xy
00023Cr 1  A5 rr            lda tmp2
00023Er 1  20 rr rr         jsr vdp_char_xy
000241r 1  60               rts
000242r 1               
000242r 1               
000242r 1               .segment "DATA"
000000r 1               
000000r 1               gaps_pos:
000000r 1  00               .byte $00   ; right down
000001r 1  22               .byte $22   ; right down
000002r 1  44               .byte $44   ; right down
000003r 1  66               .byte $66   ; right down
000004r 1               
000004r 1  88               .byte $88   ; left up
000005r 1  AA               .byte $aa   ; left up
000006r 1  CC               .byte $cc   ; left up
000007r 1  EE               .byte $ee   ; left up
000008r 1               
000008r 1               gap_frame_data:
000008r 1  00               .byte 0     ; Cell 1 (Right-moving gaps)
000009r 1  00               .byte 0     ; Cell 3 (Left-moving gaps)
00000Ar 1  00               .byte 0     ; Cell 4 (Right-moving gaps)
00000Br 1  00               .byte 0     ; Cell 0 (Left-moving gaps)
00000Cr 1               
00000Cr 1               .rodata
000000r 1               
000000r 1               gap_and_idx:
000000r 1  00 00            .word 0
000002r 1  rr rr            .addr gap_ones
000004r 1  rr rr            .addr gap_twos
000006r 1  rr rr            .addr gap_threes
000008r 1  rr rr            .addr gap_fours
00000Ar 1  rr rr            .addr gap_fives
00000Cr 1  rr rr            .addr gap_sixes
00000Er 1  rr rr            .addr gap_sevens
000010r 1  rr rr            .addr gap_eights
000012r 1  rr rr            .addr gap_nines
000014r 1  rr rr            .addr gap_tens
000016r 1               
000016r 1               gap_ones:
000016r 1  01 02 03 04      .byte 1,2,3,4,5,6,7,8
00001Ar 1  05 06 07 08  
00001Er 1               gap_twos:
00001Er 1  02 02 03 04      .byte 2,2,3,4,5,5,9,10
000022r 1  05 05 09 0A  
000026r 1               gap_threes:
000026r 1  03 03 03 04      .byte 3,3,3,4,5,6,5,9
00002Ar 1  05 06 05 09  
00002Er 1               gap_fours:
00002Er 1  04 04 04 04      .byte 4,4,4,4,5,10,4,5
000032r 1  05 0A 04 05  
000036r 1               gap_fives:
000036r 1  05 05 05 05      .byte 5,5,5,5,5,5,5,5
00003Ar 1  05 05 05 05  
00003Er 1               gap_sixes:
00003Er 1  06 05 06 0A      .byte 6,5,6,10,5,6,6,6
000042r 1  05 06 06 06  
000046r 1               gap_sevens:
000046r 1  07 09 05 04      .byte 7,9,5,4,5,6,7,7
00004Ar 1  05 06 07 07  
00004Er 1               gap_eights:
00004Er 1  08 0A 09 05      .byte 8,10,9,5,5,6,7,8
000052r 1  05 06 07 08  
000056r 1               gap_nines:
000056r 1  05 05 05 05      .byte 5,5,5,5,5,5,5,5
00005Ar 1  05 05 05 05  
00005Er 1               gap_tens:
00005Er 1  05 05 05 05      .byte 5,5,5,5,5,5,5,5
000062r 1  05 05 05 05  
000066r 1               
000066r 1               
