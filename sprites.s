; vim: set ft=asm_ca65 ts=4 sw=4 et:

; The sprites are arranged according to Jack's state.
; 1 = jack_idle_f0
; 2 = jack_left_f0
; 3 = jack_right_f0
; 4 = jack_jumping_f0
; 5 = jack_falling_f0
; 6 = jack_stunned_f0
;


; A total of 128 sprite patterns can be stored in VRAM.
; Beyond that the patterns will need to be dynamically loaded
; at runtime.
;
; To know which sprite pattern to assign to jack, we do:
;   - Find the current state.
;   - multiply by 4
;   - add 1
;   - Add the frame number
;   for example: 
;       Jack is running right.  (State = 2) and we want frame 2
;       2 * 4 = 8
;       8 + 1 = 9
;       9 + 2 = 11  (which is jack_running_right_f2)
;

; always have one empty sprite at the beginning
; 0-
.byte 0,0,0,0,0,0,0,0
.byte 0,0,0,0,0,0,0,0
.byte 0,0,0,0,0,0,0,0
.byte 0,0,0,0,0,0,0,0
; 0-
.byte $07,$0C,$0B,$08,$09,$0A,$0B,$24
.byte $13,$0B,$07,$03,$05,$04,$08,$18
.byte $E0,$30,$D0,$10,$90,$50,$D0,$24
.byte $C8,$D0,$E0,$C0,$A0,$20,$10,$18
; 1- IDLE
.byte $07,$0E,$0D,$0C,$0D,$0C,$0E,$26
.byte $13,$0B,$07,$03,$05,$04,$08,$18
.byte $C0,$30,$88,$04,$08,$F0,$10,$24
.byte $C8,$D0,$E0,$C0,$A0,$20,$10,$18
; 2-
.byte $07,$0C,$0B,$08,$09,$0A,$0B,$04
.byte $03,$03,$0F,$13,$25,$04,$08,$18
.byte $E0,$30,$D0,$10,$90,$50,$D0,$20
.byte $C0,$C0,$F0,$C8,$A4,$20,$10,$18
; 3-
.byte $03,$0C,$11,$20,$10,$0F,$08,$04
.byte $03,$03,$0F,$13,$25,$04,$08,$18
.byte $E0,$70,$B0,$30,$B0,$30,$70,$64
.byte $C0,$C0,$F0,$C8,$A4,$20,$10,$18
; 4- RIGHT
.byte $00,$07,$0C,$0D,$0C,$0D,$0C,$06
.byte $03,$03,$02,$05,$03,$02,$02,$03
.byte $00,$C0,$30,$88,$04,$04,$F8,$10
.byte $E0,$40,$C0,$C0,$A0,$14,$08,$00
; 5-
.byte $07,$0E,$0D,$0C,$0D,$0C,$0E,$06
.byte $03,$03,$03,$03,$05,$04,$08,$0C
.byte $C0,$30,$88,$04,$08,$F0,$10,$20
.byte $C0,$40,$40,$40,$A0,$20,$10,$18
; 6-
.byte $00,$07,$0C,$0D,$0C,$0D,$0C,$06
.byte $03,$03,$03,$03,$05,$08,$10,$08
.byte $00,$C0,$30,$88,$04,$04,$F8,$10
.byte $E0,$40,$80,$E0,$D0,$40,$40,$60
; 7-
.byte $07,$0E,$0D,$0C,$0D,$0C,$0E,$06
.byte $03,$03,$02,$05,$03,$02,$02,$03
.byte $C0,$30,$88,$04,$08,$F0,$10,$20
.byte $C0,$40,$C0,$C0,$A0,$20,$10,$18
; 8- LEFT
.byte $00,$03,$0C,$11,$20,$20,$1F,$08
.byte $07,$02,$03,$03,$05,$28,$10,$00
.byte $00,$E0,$30,$B0,$30,$B0,$30,$60
.byte $C0,$C0,$40,$A0,$C0,$40,$40,$C0
; 9-
.byte $03,$0C,$11,$20,$10,$0F,$08,$04
.byte $03,$02,$02,$02,$05,$04,$08,$18
.byte $E0,$70,$B0,$30,$B0,$30,$70,$60
.byte $C0,$C0,$C0,$C0,$A0,$20,$10,$30
; 10-
.byte $00,$03,$0C,$11,$20,$20,$1F,$08
.byte $07,$02,$01,$07,$0B,$02,$02,$06
.byte $00,$E0,$30,$B0,$30,$B0,$30,$60
.byte $C0,$C0,$C0,$C0,$A0,$10,$08,$10
; 11-
.byte $03,$0C,$11,$20,$10,$0F,$08,$04
.byte $03,$02,$03,$03,$05,$04,$08,$18
.byte $E0,$70,$B0,$30,$B0,$30,$70,$60
.byte $C0,$C0,$40,$A0,$C0,$40,$40,$C0
; 12- JUMP
.byte $07,$0C,$0B,$08,$09,$0A,$0B,$24
.byte $13,$0B,$07,$03,$05,$04,$08,$18
.byte $E0,$30,$D0,$10,$90,$50,$D0,$24
.byte $C8,$D0,$E0,$C0,$A0,$20,$10,$18
; 13-
.byte $07,$0E,$0D,$0C,$0D,$0C,$0E,$26
.byte $13,$0B,$07,$03,$05,$04,$08,$18
.byte $C0,$30,$88,$04,$08,$F0,$10,$24
.byte $C8,$D0,$E0,$C0,$A0,$20,$10,$18
; 14-
.byte $07,$0C,$0B,$08,$09,$0A,$0B,$04
.byte $03,$03,$0F,$13,$25,$04,$08,$18
.byte $E0,$30,$D0,$10,$90,$50,$D0,$20
.byte $C0,$C0,$F0,$C8,$A4,$20,$10,$18
; 15-
.byte $03,$0C,$11,$20,$10,$0F,$08,$04
.byte $03,$03,$0F,$13,$25,$04,$08,$18
.byte $E0,$70,$B0,$30,$B0,$30,$70,$64
.byte $C0,$C0,$F0,$C8,$A4,$20,$10,$18
; 16- FALLING
.byte $07,$0C,$0B,$08,$09,$0A,$0B,$24
.byte $13,$0B,$07,$03,$05,$04,$08,$18
.byte $E0,$30,$D0,$10,$90,$50,$D0,$24
.byte $C8,$D0,$E0,$C0,$A0,$20,$10,$18
; 17-
.byte $07,$0E,$0D,$0C,$0D,$0C,$0E,$26
.byte $13,$0B,$07,$03,$05,$04,$08,$18
.byte $C0,$30,$88,$04,$08,$F0,$10,$24
.byte $C8,$D0,$E0,$C0,$A0,$20,$10,$18
; 18-
.byte $07,$0C,$0B,$08,$09,$0A,$0B,$04
.byte $03,$03,$0F,$13,$25,$04,$08,$18
.byte $E0,$30,$D0,$10,$90,$50,$D0,$20
.byte $C0,$C0,$F0,$C8,$A4,$20,$10,$18
; 19-
.byte $03,$0C,$11,$20,$10,$0F,$08,$04
.byte $03,$03,$0F,$13,$25,$04,$08,$18
.byte $E0,$70,$B0,$30,$B0,$30,$70,$64
.byte $C0,$C0,$F0,$C8,$A4,$20,$10,$18
; 20 - STUNNED
.byte $FF,$0C,$0B,$08,$09,$0A,$0B,$24
.byte $93,$0B,$07,$03,$05,$04,$08,$18
.byte $E0,$30,$D0,$10,$90,$50,$D0,$24
.byte $C8,$D0,$E0,$C0,$A0,$20,$10,$18
; 21-
.byte $87,$0E,$0D,$0C,$0D,$0C,$0E,$26
.byte $93,$0B,$07,$03,$05,$04,$08,$18
.byte $C0,$30,$88,$04,$08,$F0,$10,$24
.byte $FF,$D0,$E0,$C0,$A0,$20,$10,$18
; 22-
.byte $FF,$0C,$0B,$08,$09,$0A,$0B,$05
.byte $03,$03,$0F,$13,$25,$04,$08,$19
.byte $E0,$30,$D0,$10,$90,$50,$D0,$21
.byte $C0,$C0,$F0,$C8,$A4,$20,$10,$19
; 23-
.byte $03,$0C,$11,$20,$10,$0F,$08,$05
.byte $03,$03,$0F,$13,$25,$04,$08,$19
.byte $E0,$70,$B0,$30,$B0,$30,$70,$65
.byte $C0,$C0,$F0,$C8,$A4,$20,$10,$FF

